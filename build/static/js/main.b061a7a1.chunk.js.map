{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","createCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","event","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","autoComplete","placeholder","onChange","Cita","deleteCita","onClick","App","citasStart","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","handleDeleteCita","newCitas","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b061a7a1.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\nimport uuid from 'uuid/v4'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({createCita}) => {\n\n    const [cita, setCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    })\n\n    const { mascota, propietario, fecha, hora, sintomas } = cita\n\n    const [error, setError] = useState (false)\n\n    const handleChange = event => {\n        setCita({\n            ...cita,\n            [event.target.name] : event.target.value\n        })\n        \n    }\n\n    const handleCita = event => {\n        event.preventDefault()\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\n            setError(true)\n            return\n        }\n        setError(false)\n\n        cita.id = uuid()\n\n        createCita(cita)\n\n        setCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: '' \n        }           \n        )\n       \n    }\n\n    return ( \n       <Fragment>\n           <h2>Crear cita</h2>\n\n           { error ? <p className = 'alerta-error'>Todos los campos son obligatorios</p> : null}\n\n           <form onSubmit = { handleCita }>\n               <label>Nombre Mascota</label>\n               <input \n                   type = 'text'\n                   autoComplete = 'off'\n                   name = 'mascota'\n                   className = 'u-full-width'\n                   placeholder = 'Nombre mascota'\n                   value = { mascota }\n                   onChange = { handleChange }\n                />\n\n                <label>Nombre Dueño</label>\n                <input \n                   type = 'text'\n                   autoComplete = 'off'\n                   name = 'propietario'\n                   className = 'u-full-width'\n                   placeholder = 'Nombre dueño de la mascota'\n                   value = { propietario }\n                   onChange = { handleChange }\n                />\n\n                <label>Fecha</label>\n                <input \n                   type = 'date'\n                   name = 'fecha'\n                   className = 'u-full-width'\n                   value = { fecha }\n                   onChange = { handleChange }\n                />\n\n                <label>Hora</label>\n                <input \n                   type = 'time'\n                   name = 'hora'\n                   className = 'u-full-width'\n                   value = { hora }\n                   onChange = { handleChange }\n                />\n\n                <label>Síntomas</label>\n                <textarea\n                    name = 'sintomas'\n                    className = 'u-full-width'\n                    onChange = { handleChange }\n                ></textarea>\n\n                <button\n                    type = 'submit'\n                    className = 'add-cita'\n                    value = { sintomas }\n                >Agregar Cita</button>\n           </form>\n       </Fragment>\n     )\n}\n\nFormulario.propTypes = {\n    createCita: PropTypes.func.isRequired\n}\n \nexport default Formulario","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Cita = ({cita, deleteCita }) => (\n    <div className = 'cita'>\n        <p>Mascota: <span>{cita.mascota}</span></p>\n        <p>Nombre dueño: <span>{cita.propietario}</span></p>\n        <p>Fecha: <span>{cita.fecha}</span></p>\n        <p>Hora: <span>{cita.hora}</span></p>\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\n\n        <button className = 'button eliminar u-full-width' onClick = { ()=>deleteCita(cita.id) }>Eliminar &times;</button>\n    </div>\n  )\n\n  Cita.propTypes = {\n      cita: PropTypes.object.isRequired,\n      deleteCita: PropTypes.func.isRequired\n  }\n\nexport default Cita;","import React, { Fragment, useState, useEffect} from 'react'\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\n\nfunction App() {\n\n  let citasStart = JSON.parse(localStorage.getItem('citas'))\n  if(!citasStart) {\n    citasStart = []\n  }\n\n  const [citas, setCitas] = useState(citasStart)\n\n  useEffect( ()=> {\n    let citasStart = JSON.parse(localStorage.getItem('citas'))\n    if(citasStart) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    }else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    }\n  },[citas])\n\n  const handeleCreateCita = cita => {\n    setCitas([...citas, cita])\n  }\n  \n  const handleDeleteCita = id => {\n    const newCitas = citas.filter(cita => cita.id !== id)\n    setCitas(newCitas)\n  }\n\n  const title = citas.length ===0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1>Administrador de citas</h1>\n\n      <div className = 'container'>\n        <div className = 'row'>\n          <div className = 'one-half column'>\n              <Formulario createCita = { handeleCreateCita }/>\n          </div>\n          <div className ='one-half column' >\n              <h2>{title}</h2>\n              {citas.map(cita => (\n                <Cita key = {cita.id} cita = {cita} deleteCita = { handleDeleteCita } />\n              ))}\n          </div>\n        </div>\n      </div>\n\n    </Fragment>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}